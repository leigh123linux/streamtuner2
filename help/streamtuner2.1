.\" (many thanks to the manpage howto!)
.\"
.TH streamtuner2 1 "2015-04-02" "2.1.4" "Application manuals"
.SH NAME
streamtuner2 \- Browser for internet radio stations
.SH SYNOPSIS
.B streamtuner2
.I command
[
.BI channel ,...
] [
.IB title
]

.SH DESCRIPTION
Streamtuner2 is a graphical application for browsing through internet
radio station directories, like:
.2c
.R "\(bu Shoutcast"
.R "\(bu Xiph.org"
.R "\(bu SurfMusik"
.R "\(bu Internet-Radio"
.R "\(bu Jamendo"
.R "\(bu MyOggRadio"
.R "\(bu RadioBrowser"
.R "\(bu SomaFM"
.R "\(bu TuneIn"
.R "\(bu Streema"
.1c
.PP
It utilizes your configured audio player or recording applications, which
can be configured in the 
.BR "<F12>"
settings window.

It is written in
.IR Python
and easy to extend. And besides the grapical interface, has a commandline
interface. It comes with a couple of feature plugins and additional channels.

.SH OPTIONS
Without any options, it starts in the graphical mode, of course.

.TP
.BI help
Prints out a summary of available commands.

.PP
.B Cached data

.TP
.BI stream " channel title"
Searches for a station with the given title. Either looks in a single
channel, or scans all plugins.
.TP
.BI url " channel title"
Prints out only the streaming URL.
.TP
.BI play " " [ channel ] " title"
Invokes the configured audio player.

.PP
.B Instantly retrieve data from directory service

.TP
.BI categories " channelname"
Returns a nested JSON list of all categories/genres.
.TP
.BI category " ""channelname"" ""Category"""
Prints out a JSON list of the genre. Each entry constains title, url and
other meta information. Note that the category must have the exact case.

.SH EXAMPLES
.TP
.BI streamtuner2 " stream" " shoutcast,xiph" " ""Top 100"""
Searches for the term "Top 100" in the shoutcast and xiph channels, and
returns all info about the first match as JSON output.
.TP
.BI streamtuner2 " play frequence3"
Looks for the first occourence, and starts the audio player for FREQUENCE3.
.TP
.BI streamtuner2 " category tunein Jazz"
Dumps a JSON list of all stations the named genre.


.SH GRAPHICAL MODE

There's only one option for the graphical UI mode:
.TP
.BI --gtk3
Loads Gtk3 via PyGI instead of Gtk2. This is implicit when running on Python3
anyway.

.TP
.BI --nt
No-threading mode avoids some UI separation, but stabilizes the interface
(in particular channel loading crashes occassionally) for some Gtk2/Gtk3
and Python combinations.

.TP
.BI -d " plugin"
Disable plugin from loading. Plugin names are all-lowercase and sometimes
short versions of the channel or feature, such as "reddit", "xiph",
"favicons" or "dnd".

.TP
.BI -e " plugin"
Load a plugin that isn't set by default.

.SH OTHER OPTIONS

.TP
.BI -D
Enable debug mode, which shows a lot of activity messages during
Streamtuner2 running - including UI changes and network requests or
extraction steps.

.TP
.BI -V
Show streamtuner version.

.TP
.BI version " -v"
Summarize all plugin versions.

.SH FILES
.IR /home/ $USER /.config/streamtuner2/settings.json
.SH "SEE ALSO"
.BR streamripper (1) 
.BR audacious (1)
.BR json (5)
.BR m3u (5)
.BR pls (5)
